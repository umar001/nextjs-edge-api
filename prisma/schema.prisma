// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  userId                   String   @db.ObjectId
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  refresh_token_expires_in Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  user                     User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id])
  userId       String?  @db.ObjectId
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EmailVerification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  code      Int?
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
}

model LoginAttempts {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String?
}

model AdminCardSpec {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  attackRange Float?   @default(1.0)
  attackWait  Float?   @default(1.0)
  elixirUsage Int?     @default(1)
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?  @db.ObjectId
}

model AdminCardLevelSpec {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  level     Int?     @default(1)
  damage    Int?     @default(1)
  health    Int?     @default(1)
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
}

model AdminRewards {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  level     Int?     @unique()
  xpMax     Int?
  xpMin     Int?
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
}

model AdminWalletRewards {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  level      Int?
  coins      Int?
  gems       Int?
  gameStatus String?
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?  @db.ObjectId
}

model DefaultCards {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String?  @unique
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
  Card      Card?    @relation(fields: [cardId], references: [id])
  cardId    String?  @db.ObjectId
}

model Card {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  name         String?        @unique
  status       Boolean?
  price        Int?
  attackRange  Float?
  attackWait   Float?
  elixirUsage  Int?
  level        Int?
  damage       Int?
  health       Int?
  User         User?          @relation(fields: [userId], references: [id])
  userId       String?        @db.ObjectId
  defaultCards DefaultCards[]
}

model UserCards {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String?  @unique
  status      Boolean?
  price       Int?
  attackRange Float?
  attackWait  Float?
  elixirUsage Int?
  level       Int?
  damage      Int?
  health      Int?
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?  @db.ObjectId
}

model Score {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  level     Int?     @default(1)
  xp        Int?     @default(0)
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
}

model UserGameWallet {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  coins     Int?     @default(0)
  gems      Int?     @default(0)
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
}

model UserWallet {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  walletAddress String?  @unique
  tokenAddress  String?
  balance       String?
  web3Provider  String?
  User          User?    @relation(fields: [userId], references: [id])
  userId        String?  @db.ObjectId
}

model PurchaseGameCoins {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tokenAmount Int?
  coins       Int?
  txHash      String?
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?  @db.ObjectId
}

model User {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  name               String?
  username           String?
  email              String?              @unique
  password           String?
  emailVerified      DateTime?
  image              String?
  role               String?              @default("user")
  accounts           Account[]
  sessions           Session[]
  cards              Card[]
  adminCardSpec      AdminCardSpec[]
  adminCardLevelSpec AdminCardLevelSpec[]
  defaultCards       DefaultCards[]
  userCards          UserCards[]
  score              Score[]
  userGameWallet     UserGameWallet[]
  adminRewards       AdminRewards[]
  adminWalletRewards AdminWalletRewards[]
  userWallet         UserWallet[]
  purchaseGameCoins  PurchaseGameCoins[]
  emailVerification  EmailVerification[]
}
